/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.smartjob.ejerciciojava.infrastructure.adapters.input.rest.api;

import com.smartjob.ejerciciojava.infrastructure.adapters.input.rest.model.ErrorResponse;
import com.smartjob.ejerciciojava.infrastructure.adapters.input.rest.model.UserRegistrationRequest;
import com.smartjob.ejerciciojava.infrastructure.adapters.input.rest.model.UserRegistrationResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "UserDetails", description = "the UserDetails API")
public interface UserDetailsApi {

    /**
     * POST /users : Register a new user
     *
     * @param userRegistrationRequest  (required)
     * @return User created successfully (status code 201)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Register a new user",
        tags = { "UserDetails" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegistrationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserRegistrationResponse> registerUser(
        @Parameter(name = "UserRegistrationRequest", description = "", required = true) @Valid @RequestBody UserRegistrationRequest userRegistrationRequest
    );

}
